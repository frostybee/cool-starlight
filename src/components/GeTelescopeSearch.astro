---
// Component Server-Side Logic (runs at build time)
// Fetch all markdown/mdx files from your docs content directory.
// Adjust the glob pattern to match your project structure.
// Starlight typically uses `src/content/docs/`.
const allDocsRaw = await Astro.glob('../content/docs/**/*.mdx'); // Or .md, .astro

// Filter out any pages you don't want in the search (e.g., drafts, specific paths)
const allDocs = allDocsRaw.filter(doc => {
  // Example: Exclude pages with `draft: true` in frontmatter
  if (doc.frontmatter.draft) {
    return false;
  }
  // Example: Exclude Starlight's utility pages if they get picked up and are not desired
  // if (doc.url && (doc.url.startsWith('/_') || doc.url.startsWith('/404'))) {
  //   return false;
  // }
  return true;
});

const pagesForSearch = allDocs.map(doc => ({
  // Use `doc.frontmatter.title` as Starlight uses this for the page title
  title: doc.frontmatter.title || 'Untitled Page',
  // `doc.url` is the canonical URL path generated by Astro
  url: doc.url
}));
---

<div id="telescope-modal" class="telescope-modal" style="display: none;" role="dialog" aria-modal="true" aria-labelledby="telescope-label" tabindex="-1">
  <div class="telescope-modal-overlay" id="telescope-modal-overlay"></div>
  <div class="telescope-modal-content">
    <h2 id="telescope-label" class="visually-hidden">Page Search</h2>
    <input type="text" id="telescope-search-input" placeholder="Search pages (Ctrl+K or Cmd+K)" aria-label="Search for a page">
    <ul id="telescope-results">
      </ul>
  </div>
</div>

<style>
  .telescope-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: flex-start;
    justify-content: center;
    z-index: 10000; /* Ensure it's above other Starlight UI */
  }

  .telescope-modal-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.6);
  }

  .telescope-modal-content {
    position: relative;
    background-color: var(--sl-color-bg, white); /* Use Starlight background color variable */
    color: var(--sl-color-text, #333); /* Use Starlight text color variable */
    padding: 20px;
    border-radius: 8px;
    width: 90%;
    max-width: 600px;
    margin-top: 10vh;
    box-shadow: 0 5px 20px rgba(0,0,0,0.25);
    display: flex;
    flex-direction: column;
    border: 1px solid var(--sl-color-border, #ccc);
  }

  #telescope-search-input {
    width: 100%;
    padding: 12px 15px;
    font-size: 1.1em;
    border: 1px solid var(--sl-color-border, #ccc);
    background-color: var(--sl-color-bg-input, white); /* Starlight input bg */
    color: var(--sl-color-text-input, #333); /* Starlight input text */
    border-radius: 6px;
    margin-bottom: 15px;
    box-sizing: border-box;
  }
  #telescope-search-input:focus {
    outline: none;
    border-color: var(--sl-color-accent, #007bff); /* Starlight accent color */
    box-shadow: 0 0 0 2px var(--sl-color-accent-low, rgba(0,123,255,0.25));
  }

  #telescope-results {
    list-style: none;
    padding: 0;
    margin: 0;
    max-height: 65vh;
    overflow-y: auto;
  }

  #telescope-results li {
    margin: 0; /* Reset margin */
  }

  #telescope-results li a {
    display: block;
    padding: 12px 15px;
    text-decoration: none;
    color: var(--sl-color-text-accent, var(--sl-color-accent, #007bff)); /* Link color */
    border-bottom: 1px solid var(--sl-color-hairline, #eee);
    transition: background-color 0.15s ease-in-out;
    border-radius: 4px;
  }
  #telescope-results li a:hover,
  #telescope-results li a:focus {
    background-color: var(--sl-color-hover, #f0f0f0); /* Hover color */
    color: var(--sl-color-text, #333);
    outline: none;
  }
  #telescope-results li:last-child a {
    border-bottom: none;
  }
  #telescope-results li a.selected {
    background-color: var(--sl-color-accent, #007bff);
    color: white;
  }
  .visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
</style>

<script define:vars={{ pagesForSearch }}>
  // The `pagesForSearch` variable is now available in this script's scope.

  // Optional: For more advanced fuzzy search, consider Fuse.js.
  // If you install it via npm: import Fuse from 'fuse.js';
  // Then, initialize: const fuse = new Fuse(PAGES, { keys: ['title', 'url'], threshold: 0.4 });
  // And use `fuse.search(query)` in `performSearch`.
  // For simplicity, this example uses a basic substring match.

  document.addEventListener('DOMContentLoaded', () => {
    const SHORTCUT_KEY = 'p'; // Ctrl+K or Cmd+K
    const PAGES = pagesForSearch || [];

    const modal = document.getElementById('telescope-modal');
    const searchInput = document.getElementById('telescope-search-input');
    const resultsList = document.getElementById('telescope-results');
    const modalOverlay = document.getElementById('telescope-modal-overlay');

    if (!modal || !searchInput || !resultsList || !modalOverlay) {
      console.warn('Telescope Search: Essential modal elements not found. Feature may not work correctly.');
      return;
    }
     if (PAGES.length === 0) {
      console.info('Telescope Search: No pages found to search.');
      // You might want to hide the trigger or the component itself if no pages are available.
    }

    let activeResultIndex = -1;
    let originalOverflow = '';

    function performSearch(query) {
      if (!query) {
        // Show top 10 pages or an empty list if query is empty
        return PAGES.slice(0, 10);
        // return [];
      }
      const lowerQuery = query.toLowerCase();
      return PAGES.filter(page => {
        const titleMatch = page.title.toLowerCase().includes(lowerQuery);
        const urlMatch = page.url && page.url.toLowerCase().includes(lowerQuery);
        return titleMatch || urlMatch;
      }).slice(0, 50); // Limit results for performance
    }

    function renderResults(foundPages) {
      resultsList.innerHTML = '';
      if (foundPages.length === 0) {
        const li = document.createElement('li');
        li.textContent = 'No pages found.';
        li.style.padding = '10px 15px';
        li.style.color = 'var(--sl-color-text-muted, #777)';
        resultsList.appendChild(li);
        return;
      }

      foundPages.forEach((page) => {
        const li = document.createElement('li');
        const a = document.createElement('a');
        a.href = page.url; // Astro `doc.url` is already site-relative
        a.textContent = page.title;
        li.appendChild(a);
        resultsList.appendChild(li);
      });
      activeResultIndex = -1; // Reset selection
    }

    function openModal() {
      originalOverflow = document.body.style.overflow;
      document.body.style.overflow = 'hidden';
      modal.style.display = 'flex';
      searchInput.value = '';
      renderResults(PAGES.slice(0,10)); // Show some initial results or all if few
      searchInput.focus();
      activeResultIndex = -1;
    }

    function closeModal() {
      document.body.style.overflow = originalOverflow;
      modal.style.display = 'none';
      resultsList.innerHTML = '';
      activeResultIndex = -1;
    }

    function updateSelectedResult(items) {
      items.forEach((item, index) => {
        if (index === activeResultIndex) {
          item.classList.add('selected');
          item.scrollIntoView({ block: 'nearest' }); // Keep selected item visible
        } else {
          item.classList.remove('selected');
        }
      });
    }

    searchInput.addEventListener('input', (event) => {
      const query = event.target.value;
      const foundPages = performSearch(query);
      renderResults(foundPages);
    });

    document.addEventListener('keydown', (event) => {
      if ((event.ctrlKey || event.metaKey) && event.key.toLowerCase() === SHORTCUT_KEY) {
        event.preventDefault();
        if (modal.style.display === 'none' || !modal.style.display) {
          openModal();
        } else {
          searchInput.focus(); // If already open, just focus input
        }
      }

      if (modal.style.display === 'flex') { // Only process these keys if modal is open
        if (event.key === 'Escape') {
          closeModal();
        }

        const items = resultsList.querySelectorAll('a');
        if (!items.length) return;

        if (event.key === 'ArrowDown') {
          event.preventDefault();
          activeResultIndex = (activeResultIndex + 1) % items.length;
          updateSelectedResult(items);
        } else if (event.key === 'ArrowUp') {
          event.preventDefault();
          activeResultIndex = (activeResultIndex - 1 + items.length) % items.length;
          updateSelectedResult(items);
        } else if (event.key === 'Enter' && activeResultIndex > -1) {
          event.preventDefault();
          if (items[activeResultIndex]) {
            items[activeResultIndex].click(); // Simulate click to navigate
            // closeModal(); // Navigation will typically close/reload the page context
          }
        }
      }
    });

    modalOverlay.addEventListener('click', closeModal);

    // Basic focus trapping
    modal.addEventListener('keydown', (e) => {
        if (e.key === 'Tab' && modal.style.display === 'flex') {
            const focusableElements = Array.from(modal.querySelectorAll('input, a')).filter(el => el.offsetParent !== null);
            if (!focusableElements.length) return;

            const firstElement = focusableElements[0];
            const lastElement = focusableElements[focusableElements.length - 1];

            if (e.shiftKey) { // Shift + Tab
                if (document.activeElement === firstElement) {
                    lastElement.focus();
                    e.preventDefault();
                }
            } else { // Tab
                if (document.activeElement === lastElement) {
                    firstElement.focus();
                    e.preventDefault();
                }
            }
        }
    });

  });
</script>
