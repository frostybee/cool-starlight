---
import fs from 'node:fs/promises';
import path from 'node:path';

const { src = '' } = Astro.props;

// Read the markdown file content at build time
let slidesMarkdown = '';
if (src) {
  // const filePath = path.resolve(Astro.root, src);
  const filePath = "src/slides/intro.md";
  console.log(`Loading slides from ${filePath}`);

  try {
    slidesMarkdown = await fs.readFile(filePath, 'utf-8');
  } catch (e) {
    slidesMarkdown = `# Error\nCould not load slides from \`${src}\``;
  }
}
---

<script>
  import Reveal from 'reveal.js';
  import RevealMarkdown from 'reveal.js/plugin/markdown/markdown.esm.js';
  import RevealHighlight from 'reveal.js/plugin/highlight/highlight.esm.js';
  import RevealNotes from 'reveal.js/plugin/notes/notes.esm.js';
  import 'reveal.js/dist/reveal.css';
  import 'reveal.js/dist/theme/moon.css';
  import 'reveal.js/plugin/highlight/monokai.css';

  class ModalRevealSlides extends HTMLElement {
    constructor() {
      super();
      this.openButton = this.querySelector('[data-open-modal]');
      this.closeButton = this.querySelector('[data-close-modal]');
      this.modal = this.querySelector('[data-modal]');
      this.overlay = this.querySelector('[data-overlay]');
      this.reveal = null;
      this.init();
    }

    init() {
      if (!this.openButton || !this.closeButton || !this.modal) return;

      // Open modal event
      this.openButton.addEventListener('click', () => this.openModal());

      // Close modal events
      this.closeButton.addEventListener('click', () => this.closeModal());
      this.overlay.addEventListener('click', () => this.closeModal());

      // Close on escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && this.modal.classList.contains('modal-active')) {
          this.closeModal();
        }
      });
    }

    openModal() {
      this.modal.classList.add('modal-active');
      document.body.style.overflow = 'hidden'; // Prevent scrolling when modal is open
      this.toggleLeftSidebar("none");
      // Initialize Reveal.js only when modal is opened
      if (!this.reveal) {
        const revealContainer = this.querySelector('.reveal');
        if (revealContainer) {
          setTimeout(() => {
            this.reveal = new Reveal({
              hash: true,
              slideNumber: true,
              embedded: true,
              margin: 0.1,
              plugins: [ RevealMarkdown, RevealHighlight, RevealNotes ]
            });
            this.reveal.initialize();
          }, 100); // Small delay to ensure the modal is visible
        }
      } else {
        // If Reveal.js is already initialized, just sync the layout
        setTimeout(() => {
          this.reveal.layout();
        }, 100);
      }
    }

    closeModal() {
      this.modal.classList.remove('modal-active');
      document.body.style.overflow = ''; // Restore scrolling
      this.toggleLeftSidebar("");
    }
    toggleLeftSidebar(display : string){
      const sidebar = document.getElementById("starlight__sidebar");
      if (sidebar != null) {
        sidebar.style.display = display;
      }
    }
  }

  customElements.define('modal-reveal-slides', ModalRevealSlides);
</script>

<modal-reveal-slides>
  <!-- Button to open the modal -->
  <button data-open-modal class="trigger-button">
    <slot name="trigger">Open Slides</slot>
  </button>

  <!-- Modal container -->
  <div data-modal class="modal">
    <div data-overlay class="modal-overlay"></div>

    <div class="modal-container">
      <button data-close-modal class="modal-close">&times;</button>

      <!-- Reveal.js container -->
      <div class="reveal">
        <div class="slides">
              <section data-markdown>
        <textarea data-template>
          {slidesMarkdown}
        </textarea>
      </section>
          <!-- Reveal.js markdown plugin expects a <section data-markdown> -->
          <!-- <section data-markdown data-separator="^\n---\n$" data-separator-vertical="^\n--\n$"> -->
            <!-- <textarea data-template> -->

            <!-- </textarea> -->
          <!-- </section> -->
        </div>
      </div>
    </div>
  </div>
</modal-reveal-slides>

<style is:global>
  /* Trigger button styles */
  .trigger-button {
    padding: 0.5rem 1rem;
    background-color: var(--sl-color-accent);
    color: var(--sl-color-white);
    border: none;
    border-radius: 0.25rem;
    cursor: pointer;
    font-weight: 500;
  }

  .trigger-button:hover {
    background-color: var(--sl-color-accent-high);
  }

  /* Modal styles */
  .modal {
    position: fixed;
    top: 0;
    left: 0;
    /* TODO: detect the width of the screen instead. */
    /* width: 100%; */
    width: 2000px;
    height: 100%;
    z-index: 10000;
    display: flex;
    align-items: center;
    justify-content: center;
    visibility: hidden;
    padding-bottom: 200px;
    opacity: 0;
    transition: visibility 0s linear 0.25s, opacity 0.25s;
  }

  .modal-active {
    visibility: visible;
    opacity: 1;
    transition-delay: 0s;
  }

  .modal-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.75);
    z-index: 10001;
  }

  .modal-container {
    position: relative;
    width: 90%;
    height: 90%;
    max-width: 1200px;
    background-color: var(--sl-color-bg);
    border-radius: 0.5rem;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
    z-index: 10002;
    overflow: hidden;
  }

  .modal-close {
    position: absolute;
    top: 2rem;
    left: 1rem;
    background: rgba(0, 0, 0, 0.5);
    color: white;
    border: none;
    width: 2rem;
    height: 2rem;
    font-size: 1.5rem;
    border-radius: 50%;
    cursor: pointer;
    z-index: 10003;
    display: flex;
    align-items: center;
    justify-content: center;
    line-height: 1;
  }

  /* Reveal.js container styles */
  .modal .reveal {
    height: 100%;
    width: 100%;

  }

  .modal .reveal .slides {
    text-align: left;
  }

  /* Some additional styles for slides */
  .reveal h1, .reveal h2, .reveal h3 {
    margin-bottom: 0.5em;
  }

  .reveal pre {
    width: 100%;
    box-sizing: border-box;
  }

  .reveal code {
    font-size: 0.9em;
  }
</style>

