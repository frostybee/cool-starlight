---
import { getCollection } from 'astro:content';

// Sample pages for demonstration; replace with your actual Starlight pages
// const pages = [
//   { title: 'Home', slug: '/' },
//   { title: 'Getting Started', slug: '/getting-started' },
//   { title: 'Components', slug: '/components' },
//   { title: 'API Reference', slug: '/api-reference' },
//   { title: 'Tutorials', slug: '/tutorials' }
// ];

// Optionally, fetch pages dynamically from Starlight content collections
const docs = await getCollection('docs');
const pages = docs.map(doc => ({ title: doc.data.title, slug: doc.slug }));
---

<div class="search-modal" id="searchModal" role="dialog" aria-labelledby="searchInput">
  <div class="modal-content">
    <input
      type="text"
      id="searchInput"
      placeholder="Search pages..."
      autocomplete="off"
      aria-label="Search pages"
    />
    <ul id="searchResults" role="listbox"></ul>
  </div>
</div>

<style>
  .search-modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    align-items: center;
    justify-content: center;
    z-index: 1000;
  }

  .search-modal.active {
    display: flex;
  }

  .modal-content {
    background: #1a1a1a;
    border-radius: 8px;
    width: 90%;
    max-width: 500px;
    max-height: 80vh;
    overflow: hidden;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);
    color: #ffffff;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  }

  input#searchInput {
    width: 100%;
    padding: 12px 16px;
    border: none;
    background: #2a2a2a;
    color: #ffffff;
    font-size: 16px;
    outline: none;
    border-bottom: 1px solid #3a3a3a;
  }

  input#searchInput:focus {
    border-bottom: 1px solid #007bff;
  }

  ul#searchResults {
    list-style: none;
    margin: 0;
    padding: 0;
    max-height: 60vh;
    overflow-y: auto;
  }

  ul#searchResults li {
    padding: 12px 16px;
    cursor: pointer;
    border-bottom: 1px solid #3a3a3a;
  }

  ul#searchResults li:hover,
  ul#searchResults li.selected {
    background: #007bff;
  }

  ul#searchResults li:last-child {
    border-bottom: none;
  }
</style>

<script define:vars={{ pages }}>
  // Page data from Astro frontmatter
//   const pages = [
//     { title: 'Home', slug: '/' },
//     { title: 'Getting Started', slug: '/getting-started' },
//     { title: 'Components', slug: '/components' },
//     { title: 'API Reference', slug: '/api-reference' },
//     { title: 'Tutorials', slug: '/tutorials' }
//   ];

  const modal = document.getElementById('searchModal');
  const searchInput = document.getElementById('searchInput');
  const searchResults = document.getElementById('searchResults');
  let selectedIndex = -1;
  let filteredPages = pages; // Track filtered pages for navigation

  // Fuzzy search function
  function fuzzyMatch(str, query) {
    str = str.toLowerCase();
    query = query.toLowerCase();
    let i = 0,
      j = 0;
    while (i < str.length && j < query.length) {
      if (str[i] === query[j]) j++;
      i++;
    }
    return j === query.length;
  }

  // Render search results
  function renderResults(query = '') {
    searchResults.innerHTML = '';
    selectedIndex = -1; // Reset selection
    filteredPages = pages.filter(page =>
      query === '' || fuzzyMatch(page.title, query)
    );

    filteredPages.forEach((page, index) => {
      const li = document.createElement('li');
      li.textContent = page.title;
      li.setAttribute('role', 'option');
      li.setAttribute('aria-selected', 'false');
      li.addEventListener('click', () => {
        window.location.href = page.slug;
      });
      searchResults.appendChild(li);
    });
  }

  // Open modal
  function openModal() {
    modal.classList.add('active');
    searchInput.focus();
    renderResults();
  }

  // Close modal
  function closeModal() {
    modal.classList.remove('active');
    searchInput.value = '';
    searchResults.innerHTML = '';
    selectedIndex = -1;
    filteredPages = pages;
  }

  // Update selected item
  function updateSelection() {
    const results = searchResults.querySelectorAll('li');
    results.forEach((li, index) => {
      const isSelected = index === selectedIndex;
      li.classList.toggle('selected', isSelected);
      li.setAttribute('aria-selected', isSelected);
    });
    if (selectedIndex >= 0 && results[selectedIndex]) {
      results[selectedIndex].scrollIntoView({ block: 'nearest' });
    }
  }

  // Handle keyboard navigation
  function handleKeydown(e) {
    const results = searchResults.querySelectorAll('li');

    if (e.key === 'ArrowDown') {
      e.preventDefault();
      if (selectedIndex < results.length - 1) {
        selectedIndex++;
        updateSelection();
      }
    } else if (e.key === 'ArrowUp') {
      e.preventDefault();
      if (selectedIndex > 0) {
        selectedIndex--;
        updateSelection();
      } else if (selectedIndex === 0) {
        selectedIndex = -1; // Deselect when moving up from first item
        updateSelection();
      }
    } else if (e.key === 'Enter' && selectedIndex >= 0) {
      e.preventDefault();
      window.location.href = filteredPages[selectedIndex].slug;
    } else if (e.key === 'Escape') {
      closeModal();
    }
  }

  // Event listeners
  document.addEventListener('keydown', e => {
    if (e.ctrlKey && e.key === 'p') {
      e.preventDefault();
      openModal();
    }
  });

  searchInput.addEventListener('input', () => {
    renderResults(searchInput.value);
  });

  searchInput.addEventListener('keydown', handleKeydown);

  modal.addEventListener('click', e => {
    if (e.target === modal) closeModal();
  });

  document.addEventListener('keydown', e => {
    if (e.key === 'Escape' && modal.classList.contains('active')) {
      closeModal();
    }
  });
</script>
