---
// SlideViewer.astro - A component that provides slide presentation functionality
---

<div id="slide-viewer-trigger">
  <button id="start-slideshow" class="slide-viewer-button">
    üìΩÔ∏è View as Slides
  </button>
</div>

<div id="slide-viewer-modal" class="slide-modal hidden">
  <div class="slide-container">
    <div class="slide-toc-sidebar" id="slide-toc-sidebar">
      <div class="slide-toc-header">
        <h3>Table of Contents</h3>
        <button id="toggle-toc" class="toc-toggle-btn" aria-label="Toggle table of contents">
          ‚Üê
        </button>
      </div>
      <div class="slide-toc-content" id="slide-toc-content">
        <!-- TOC items will be inserted here -->
      </div>
    </div>
    
    <div class="slide-main-area">
      <div class="slide-content-wrapper">
        <div id="slide-content" class="slide-content">
          <!-- Slides will be inserted here -->
        </div>
      </div>
    </div>
    
    <div class="slide-filmstrip-sidebar" id="slide-filmstrip-sidebar">
      <div class="slide-filmstrip-header">
        <button id="toggle-filmstrip" class="filmstrip-toggle-btn" aria-label="Toggle filmstrip">
          ‚Üí
        </button>
        <h3>Slides</h3>
      </div>
      <div class="slide-filmstrip-content" id="slide-filmstrip-content">
        <!-- Filmstrip thumbnails will be inserted here -->
      </div>
    </div>
    
    <div class="slide-navigation">
      <button id="prev-slide" class="slide-nav-btn" aria-label="Previous slide">
        ‚Üê Previous
      </button>
      <div class="slide-counter">
        <span id="current-slide">1</span> / <span id="total-slides">1</span>
      </div>
      <div class="slide-font-adjuster">
        <button id="slide-decrease-font" class="font-adj-btn" aria-label="Decrease font size" title="Decrease font size">A-</button>
        <button id="slide-reset-font" class="font-adj-btn" aria-label="Reset font size" title="Reset font size">A</button>
        <button id="slide-increase-font" class="font-adj-btn" aria-label="Increase font size" title="Increase font size">A+</button>
      </div>
      <button id="close-slideshow" class="slide-nav-btn close-btn" aria-label="Close slideshow">
        ‚úï
      </button>
      <button id="next-slide" class="slide-nav-btn" aria-label="Next slide">
        Next ‚Üí
      </button>
    </div>
  </div>
</div>

<style>
  .slide-viewer-button {
    background: var(--sl-color-accent);
    color: var(--sl-color-accent-text);
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 0.5rem;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    margin: 1rem 0;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
  }

  .slide-viewer-button:hover {
    background: var(--sl-color-accent-high);
    transform: translateY(-1px);
  }

  .slide-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: linear-gradient(135deg, #1e3c72, #2a5298);
    z-index: 2147483647 !important;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .slide-modal.hidden {
    display: none;
  }

  .slide-container {
    width: 98%;
    max-width: 100vw;
    height: 100vh;
    background: rgba(255, 255, 255, 0.95);
    display: flex;
    flex-direction: column;    
    overflow: hidden;
    margin: 0 auto;
    border-radius: 8px;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
  }

  .slide-toc-sidebar {
    position: absolute;
    top: 0;
    left: 0;
    width: 300px;
    height: 100%;
    background: var(--sl-color-bg-sidebar);
    border-right: 1px solid var(--sl-color-gray-5);
    z-index: 10;
    transform: translateX(-250px);
    transition: transform 0.3s ease;
    display: flex;
    flex-direction: column;
    pointer-events: none;
  }

  .slide-toc-sidebar.open {
    transform: translateX(0);
    pointer-events: auto;
  }

  .slide-toc-header {
    padding: 1rem;
    border-bottom: 1px solid var(--sl-color-gray-5);
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: var(--sl-color-bg-nav);
  }

  .slide-toc-header h3 {
    margin: 0;
    font-size: 1rem;
    color: var(--sl-color-text);
  }

  .toc-toggle-btn {
    background: none;
    border: none;
    font-size: 1.2rem;
    cursor: pointer;
    color: var(--sl-color-text);
    padding: 0.25rem;
    border-radius: 4px;
    transition: background-color 0.2s;
    pointer-events: auto;
  }

  .toc-toggle-btn:hover {
    background: var(--sl-color-gray-6);
  }

  .slide-toc-sidebar.open .toc-toggle-btn {
    transform: rotate(180deg);
  }

  .slide-toc-content {
    flex: 1;
    overflow-y: auto;
    padding: 0.5rem 0;
  }

  .toc-item {
    display: block;
    padding: 0.5rem 1rem;
    color: var(--sl-color-text);
    text-decoration: none;
    border: none;
    background: none;
    width: 100%;
    text-align: left;
    cursor: pointer;
    transition: background-color 0.2s;
    font-size: 0.9rem;
    line-height: 1.4;
  }

  .toc-item:hover {
    background: var(--sl-color-gray-6);
  }

  .toc-item.active {
    background: var(--sl-color-accent-low);
    color: var(--sl-color-accent);
    font-weight: 600;
  }

  .toc-item.h3 {
    padding-left: 2rem;
    font-size: 0.85rem;
    color: var(--sl-color-gray-2);
  }

  .slide-main-area {
    flex: 1;
    display: flex;
    flex-direction: column;
    position: relative;
    min-height: 0;
  }

  .slide-filmstrip-sidebar {
    position: absolute;
    top: 0;
    right: 0;
    width: 200px;
    height: 100%;
    background: var(--sl-color-bg-sidebar);
    border-left: 1px solid var(--sl-color-gray-5);
    z-index: 10;
    transform: translateX(150px);
    transition: transform 0.3s ease;
    display: flex;
    flex-direction: column;
    pointer-events: none;
  }

  .slide-filmstrip-sidebar.open {
    transform: translateX(0);
    pointer-events: auto;
  }

  .slide-filmstrip-header {
    padding: 1rem;
    border-bottom: 1px solid var(--sl-color-gray-5);
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: var(--sl-color-bg-nav);
  }

  .slide-filmstrip-header h3 {
    margin: 0;
    font-size: 1rem;
    color: var(--sl-color-text);
  }

  .filmstrip-toggle-btn {
    background: none;
    border: none;
    font-size: 1.2rem;
    cursor: pointer;
    color: var(--sl-color-text);
    padding: 0.25rem;
    border-radius: 4px;
    transition: background-color 0.2s;
    pointer-events: auto;
  }

  .filmstrip-toggle-btn:hover {
    background: var(--sl-color-gray-6);
  }

  .slide-filmstrip-sidebar.open .filmstrip-toggle-btn {
    transform: rotate(180deg);
  }

  .slide-filmstrip-content {
    flex: 1;
    overflow-y: auto;
    padding: 0.5rem;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .filmstrip-thumbnail {
    width: 100%;
    height: 100px;
    background: #f8f9fa;
    border: 2px solid var(--sl-color-gray-4);
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s ease;
    overflow: hidden;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    box-sizing: border-box;
  }

  .filmstrip-thumbnail:hover {
    border-color: var(--sl-color-accent);
    transform: translateX(-2px);
    box-shadow: 4px 0 8px rgba(0, 0, 0, 0.1);
  }

  .filmstrip-thumbnail.active {
    border-color: var(--sl-color-accent);
    border-width: 3px;
    background: var(--sl-color-accent-low);
  }

  .filmstrip-thumbnail-content {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    transform: scale(0.12);
    transform-origin: top left;
    pointer-events: none;
    overflow: hidden;
    background: white;
    opacity: 0.8;
  }

  .filmstrip-thumbnail-content > div {
    width: 833%;
    height: 833%;
    padding: 2rem;
    font-size: 16px;
    line-height: 1.4;
  }

  .filmstrip-thumbnail-number {
    position: absolute;
    bottom: 4px;
    right: 4px;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    font-size: 0.7rem;
    padding: 2px 6px;
    border-radius: 3px;
    font-weight: bold;
  }


  .slide-counter {
    font-size: 2.1rem;
    font-weight: 600;
    color: var(--sl-color-text);
  }

  .slide-content-wrapper {
    flex: 1;
    overflow-y: auto;
    scrollbar-width: thin;
    scrollbar-color: var(--sl-color-gray-3) transparent;
    min-height: 0;
  }

  .slide-content-wrapper::-webkit-scrollbar {
    width: 8px;
  }

  .slide-content-wrapper::-webkit-scrollbar-track {
    background: transparent;
  }

  .slide-content-wrapper::-webkit-scrollbar-thumb {
    background: var(--sl-color-gray-3);
    border-radius: 4px;
  }

  .slide-content {
    padding: 4rem;
    min-height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: stretch;
    text-align: left;
    transition: opacity 0.3s ease, transform 0.3s ease;
    width: 100%;
    margin: 0 auto;
    box-sizing: border-box;
  }

  .slide-content.transitioning {
    opacity: 0;
    transform: translateX(20px);
  }


  .slide-navigation {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 2rem;
    background: var(--sl-color-bg-nav);
    border-top: 1px solid var(--sl-color-gray-5);
    flex-shrink: 0;
    z-index: 5;
  }

  .slide-nav-btn {
    background: var(--sl-color-accent);
    color: var(--sl-color-accent-text);
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 0.5rem;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    min-width: 120px;
  }

  .slide-nav-btn:hover:not(:disabled) {
    background: var(--sl-color-accent-high);
    transform: translateY(-1px);
  }

  .slide-nav-btn:disabled {
    background: var(--sl-color-gray-4);
    color: var(--sl-color-gray-2);
    cursor: not-allowed;
    transform: none;
  }

  .close-btn {
    background: var(--sl-color-red);
    color: white;
    min-width: auto;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.2rem;
    padding: 0;
  }

  .close-btn:hover {
    background: var(--sl-color-red-high);
  }

  /* Font size adjuster styles */
  .slide-font-adjuster {
    display: flex;
    gap: 0.5rem;
    align-items: center;
  }

  .font-adj-btn {
    background-color: var(--sl-color-gray-5);
    border: none;
    border-radius: 0.25rem;
    color: var(--sl-color-white);
    cursor: pointer;
    font-weight: bold;
    padding: 0.25rem 0.5rem;
    transition: background-color 0.2s;
    position: relative;
  }

  .font-adj-btn:hover {
    background-color: var(--sl-color-gray-4);
  }

  .font-adj-btn::after {
    content: attr(title);
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    background-color: var(--sl-color-gray-6, #333);
    color: var(--sl-color-white, #fff);
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.75rem;
    white-space: nowrap;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.2s, visibility 0.2s;
    pointer-events: none;
    z-index: 10;
    margin-bottom: 0.5rem;
  }

  .font-adj-btn:hover::after {
    opacity: 1;
    visibility: visible;
  }

  #slide-decrease-font {
    font-size: 0.8rem;
  }

  #slide-reset-font {
    font-size: 1rem;
  }

  #slide-increase-font {
    font-size: 1.2rem;
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    .slide-container {
      width: 100vw;
      height: 100vh;
      border-radius: 0;
    }

    .slide-navigation {
      padding: 1rem;
    }

    .slide-content {
      padding: 1.5rem;
    }

    .slide-nav-btn {
      padding: 0.5rem 1rem;
      font-size: 0.9rem;
      min-width: 100px;
    }

    .slide-counter {
      font-size: 1rem;
    }
  }

  /* Slide content styling - Reveal.js inspired */
  .slide-content {
    --font-scale: 1;
  }

  .slide-content :global(h1) {
    margin: 0 0 1rem 0;
    font-size: calc(5rem * var(--font-scale));
    font-weight: 700;
    line-height: 1.2;
    color: #222;
    text-shadow: 0 0 6px rgba(0, 0, 0, 0.2);
  }

  .slide-content :global(h2) {
    margin: 0 0 1rem 0;
    font-size: calc(4rem * var(--font-scale));
    font-weight: 600;
    line-height: 1.3;
    color: #2a5298;
  }

  .slide-content :global(h3) {
    margin: 0 0 1rem 0;
    font-size: calc(3rem * var(--font-scale));
    font-weight: 600;
    line-height: 1.3;
    color: #1e3c72;
  }

  .slide-content :global(h4) {
    margin: 0 0 1rem 0;
    font-size: calc(2.5rem * var(--font-scale));
    font-weight: 500;
    line-height: 1.4;
    color: #444;
  }

  .slide-content :global(p) {
    font-size: calc(1.8rem * var(--font-scale));
    line-height: 1.6;
    margin: 0 0 1.5rem 0;
    color: #333;
    width: 100%;
  }

  .slide-content :global(li) {
    font-size: calc(1.8rem * var(--font-scale));
    line-height: 1.6;
    margin: 0.5rem 0;
    color: #333;
  }

  .slide-content :global(ul),
  .slide-content :global(ol) {
    font-size: calc(1.8rem * var(--font-scale));
    text-align: left;
    margin: 1rem 0;
    width: 100%;
  }

  .slide-content :global(ul) {
    list-style-type: none;
    padding-left: 0;
  }

  .slide-content :global(ul li::before) {
    content: "‚ñ∂";
    color: #2a5298;
    font-weight: bold;
    display: inline-block;
    width: 1em;
    margin-right: 0.5em;
  }

  .slide-content :global(strong) {
    color: #1e3c72;
    font-weight: 700;
  }

  .slide-content :global(em) {
    color: #2a5298;
    font-style: italic;
  }

  .slide-content :global(img) {
    max-width: 80%;
    height: auto;
    border-radius: 8px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
    margin: 2rem 0;
  }

  .slide-content :global(pre) {
    font-size: calc(1.6rem * var(--font-scale));
    overflow-x: auto;
    margin: 2rem 0;
    text-align: left;
    width: 100% !important;
    max-width: 100% !important;
    line-height: 1.5;
    box-sizing: border-box;
    padding: 1rem;
  }

  .slide-content :global(div.expressive-code),
  .slide-content :global(.expressive-code),
  .slide-content :global(.astro-code) {
    width: 100% !important;
    max-width: 100% !important;
    margin: 2rem 0;
  }

  .slide-content :global(code) {
    font-size: calc(1.4rem * var(--font-scale));
  }

  .slide-content :global(blockquote) {
    margin: 2rem 0;
    padding: 2rem;
    border-left: 6px solid #2a5298;
    background: rgba(42, 82, 152, 0.1);
    border-radius: 0 8px 8px 0;
    font-style: italic;
    font-size: calc(1.6rem * var(--font-scale));
    color: #1e3c72;
    width: 100%;
    position: relative;
  }

  .slide-content :global(blockquote::before) {
    content: """;
    font-size: 4rem;
    color: #2a5298;
    position: absolute;
    top: -10px;
    left: 20px;
    font-family: serif;
  }
</style>

<script>
  class SlideViewer {
    constructor() {
      this.slides = [];
      this.currentSlide = 0;
      this.fontSize = 100; // Default font size percentage
      
      this.modal = document.getElementById('slide-viewer-modal');
      this.slideContent = document.getElementById('slide-content');
      this.currentSlideEl = document.getElementById('current-slide');
      this.totalSlidesEl = document.getElementById('total-slides');
      this.prevBtn = document.getElementById('prev-slide');
      this.nextBtn = document.getElementById('next-slide');
      this.closeBtn = document.getElementById('close-slideshow');
      this.startBtn = document.getElementById('start-slideshow');
      this.decreaseFontBtn = document.getElementById('slide-decrease-font');
      this.resetFontBtn = document.getElementById('slide-reset-font');
      this.increaseFontBtn = document.getElementById('slide-increase-font');
      this.tocSidebar = document.getElementById('slide-toc-sidebar');
      this.tocContent = document.getElementById('slide-toc-content');
      this.tocToggleBtn = document.getElementById('toggle-toc');
      this.filmstripSidebar = document.getElementById('slide-filmstrip-sidebar');
      this.filmstripContent = document.getElementById('slide-filmstrip-content');
      this.filmstripToggleBtn = document.getElementById('toggle-filmstrip');

      console.log('SlideViewer elements found:', {
        modal: !!this.modal,
        slideContent: !!this.slideContent,
        prevBtn: !!this.prevBtn,
        nextBtn: !!this.nextBtn,
        closeBtn: !!this.closeBtn,
        startBtn: !!this.startBtn,
        decreaseFontBtn: !!this.decreaseFontBtn,
        resetFontBtn: !!this.resetFontBtn,
        increaseFontBtn: !!this.increaseFontBtn,
      });

      this.init();
    }

    init() {
      this.parseSlides();
      this.bindEvents();
      
      if (this.slides.length === 0) {
        this.startBtn.style.display = 'none';
      }
    }

    parseSlides() {
      const articleContent = document.querySelector('.sl-markdown-content, main .content, article');
      
      if (!articleContent) {
        console.warn('SlideViewer: Could not find article content');
        return;
      }

      const content = articleContent.cloneNode(true);
      
      // Remove the slide viewer component itself
      const slideViewerTrigger = content.querySelector('#slide-viewer-trigger');
      if (slideViewerTrigger) {
        slideViewerTrigger.remove();
      }

      const hrElements = content.querySelectorAll('hr');
      const headingElements = content.querySelectorAll('h2, h3');
      console.log('Found HR elements:', hrElements.length);
      console.log('Found H2/H3 elements:', headingElements.length);
      
      if (hrElements.length === 0 && headingElements.length === 0) {
        // No separators found, treat entire content as one slide
        this.slides = [content];
      } else {
        // Split content by both HR elements and H2/H3 headings
        this.slides = [];
        let currentSlideContent = document.createElement('div');
        
        Array.from(content.childNodes).forEach((node) => {
          const isSlideBreak = (node.nodeType === Node.ELEMENT_NODE && node.tagName === 'HR') ||
                              (node.nodeType === Node.ELEMENT_NODE && (node.tagName === 'H2' || node.tagName === 'H3'));
          
          if (isSlideBreak) {
            // Save previous slide if it has content (but not for HR elements as they're just separators)
            if (currentSlideContent.children.length > 0 || (currentSlideContent.textContent && currentSlideContent.textContent.trim())) {
              this.slides.push(currentSlideContent);
            }
            
            // Start new slide
            currentSlideContent = document.createElement('div');
            
            // For headings, include them in the new slide; for HR, don't include them
            if (node.tagName === 'H2' || node.tagName === 'H3') {
              currentSlideContent.appendChild(node.cloneNode(true));
            }
          } else {
            currentSlideContent.appendChild(node.cloneNode(true));
          }
        });
        
        // Add the last slide if it has content
        if (currentSlideContent.children.length > 0 || (currentSlideContent.textContent && currentSlideContent.textContent.trim())) {
          this.slides.push(currentSlideContent);
        }
      }

      console.log('Parsed slides:', this.slides.length);
      console.log('Slides content preview:', this.slides.map((slide, index) => ({
        index: index,
        childCount: slide.children.length,
        textLength: slide.textContent ? slide.textContent.length : 0,
        firstChild: slide.children[0] ? slide.children[0].tagName : 'none'
      })));
      this.totalSlidesEl.textContent = this.slides.length.toString();
      this.createTableOfContents();
      this.createFilmstrip();
    }

    createTableOfContents() {
      this.tocContent.innerHTML = '';
      
      this.slides.forEach((slide, index) => {
        // Extract the first heading from each slide
        const heading = slide.querySelector('h1, h2, h3, h4, h5, h6');
        let title = `Slide ${index + 1}`;
        let headingLevel = 'h2';
        
        if (heading) {
          title = heading.textContent.trim();
          headingLevel = heading.tagName.toLowerCase();
        }
        
        const tocItem = document.createElement('button');
        tocItem.className = `toc-item ${headingLevel}`;
        tocItem.textContent = title;
        tocItem.setAttribute('data-slide-index', index);
        
        tocItem.addEventListener('click', () => {
          this.goToSlide(index);
        });
        
        this.tocContent.appendChild(tocItem);
      });
      
      this.updateTocSelection();
    }

    goToSlide(index) {
      if (index >= 0 && index < this.slides.length) {
        this.currentSlide = index;
        this.showSlide(index);
        this.updateTocSelection();
        this.updateFilmstripSelection();
      }
    }

    createFilmstrip() {
      this.filmstripContent.innerHTML = '';
      
      this.slides.forEach((slide, index) => {
        const thumbnail = document.createElement('div');
        thumbnail.className = 'filmstrip-thumbnail';
        thumbnail.setAttribute('data-slide-index', index);
        
        // Create thumbnail content
        const thumbnailContent = document.createElement('div');
        thumbnailContent.className = 'filmstrip-thumbnail-content';
        
        const slideClone = slide.cloneNode(true);
        const contentDiv = document.createElement('div');
        contentDiv.appendChild(slideClone);
        thumbnailContent.appendChild(contentDiv);
        
        // Create slide number
        const thumbnailNumber = document.createElement('div');
        thumbnailNumber.className = 'filmstrip-thumbnail-number';
        thumbnailNumber.textContent = (index + 1).toString();
        
        thumbnail.appendChild(thumbnailContent);
        thumbnail.appendChild(thumbnailNumber);
        
        thumbnail.addEventListener('click', () => {
          this.goToSlide(index);
        });
        
        this.filmstripContent.appendChild(thumbnail);
      });
      
      this.updateFilmstripSelection();
    }

    updateTocSelection() {
      const tocItems = this.tocContent.querySelectorAll('.toc-item');
      tocItems.forEach((item, index) => {
        item.classList.toggle('active', index === this.currentSlide);
      });
    }

    updateFilmstripSelection() {
      const filmstripItems = this.filmstripContent.querySelectorAll('.filmstrip-thumbnail');
      filmstripItems.forEach((item, index) => {
        item.classList.toggle('active', index === this.currentSlide);
      });
    }

    bindEvents() {
      console.log('Binding events to buttons...');
      
      this.startBtn.addEventListener('click', () => {
        console.log('Start button clicked');
        this.openSlideshow();
      });
      
      
      this.closeBtn.addEventListener('click', () => {
        console.log('Close button clicked');
        this.closeSlideshow();
      });
      
      this.prevBtn.addEventListener('click', (e) => {
        console.log('Prev button clicked');
        e.preventDefault();
        e.stopPropagation();
        this.previousSlide();
      });
      
      this.nextBtn.addEventListener('click', (e) => {
        console.log('Next button clicked');
        e.preventDefault();
        e.stopPropagation();
        this.nextSlide();
      });

      // Fallback: Also add event listener using direct onclick
      this.nextBtn.onclick = (e) => {
        console.log('Next button onclick fired');
        e.preventDefault();
        e.stopPropagation();
        this.nextSlide();
      };

      // Keyboard navigation
      document.addEventListener('keydown', (e) => {
        if (!this.modal.classList.contains('hidden')) {
          switch(e.key) {
            case 'Escape':
              this.closeSlideshow();
              break;
            case 'ArrowLeft':
              e.preventDefault();
              this.previousSlide();
              break;
            case 'ArrowRight':
              e.preventDefault();
              this.nextSlide();
              break;
          }
        }
      });

      // Close modal when clicking outside
      this.modal.addEventListener('click', (e) => {
        if (e.target === this.modal) {
          this.closeSlideshow();
        }
      });

      // Font size adjustment events
      this.decreaseFontBtn.addEventListener('click', () => {
        this.adjustFontSize(-20);
      });

      this.resetFontBtn.addEventListener('click', () => {
        this.resetFontSize();
      });

      this.increaseFontBtn.addEventListener('click', () => {
        this.adjustFontSize(20);
      });

      // TOC toggle functionality
      this.tocToggleBtn.addEventListener('click', () => {
        this.tocSidebar.classList.toggle('open');
      });

      // Filmstrip toggle functionality
      this.filmstripToggleBtn.addEventListener('click', () => {
        this.filmstripSidebar.classList.toggle('open');
      });
    }

    openSlideshow() {
      if (this.slides.length === 0) return;
      
      this.currentSlide = 0;
      // Move modal to document body to escape stacking context
      document.body.appendChild(this.modal);
      this.modal.classList.remove('hidden');
      this.showSlide(0);
      document.body.style.overflow = 'hidden';
      
      // Small delay to ensure DOM is ready for interactions
      setTimeout(() => {
        this.nextBtn.style.pointerEvents = 'auto';
        this.prevBtn.style.pointerEvents = 'auto';
      }, 200);
    }

    closeSlideshow() {
      this.modal.classList.add('hidden');
      document.body.style.overflow = '';
    }

    showSlide(index) {
      this.slideContent.classList.add('transitioning');
      
      setTimeout(() => {
        this.slideContent.innerHTML = '';
        this.slideContent.appendChild(this.slides[index].cloneNode(true));
        this.currentSlideEl.textContent = (index + 1).toString();
        
        // Update navigation buttons
        this.prevBtn.disabled = index === 0;
        this.nextBtn.disabled = index === this.slides.length - 1;
        
        // Scroll to top of slide
        const slideWrapper = this.slideContent.parentElement;
        slideWrapper.scrollTop = 0;
        
        this.slideContent.classList.remove('transitioning');
        this.updateTocSelection();
        this.updateFilmstripSelection();
      }, 150);
    }


    nextSlide() {
      console.log('nextSlide called, current:', this.currentSlide, 'total:', this.slides.length);
      if (this.currentSlide < this.slides.length - 1) {
        this.currentSlide++;
        this.showSlide(this.currentSlide);
      } else {
        console.log('Cannot go to next slide - already at last slide');
      }
    }

    previousSlide() {
      if (this.currentSlide > 0) {
        this.currentSlide--;
        this.showSlide(this.currentSlide);
      }
    }

    adjustFontSize(change) {
      const newSize = Math.max(60, Math.min(500, this.fontSize + change));
      this.fontSize = newSize;
      this.applyFontSize();
    }

    resetFontSize() {
      this.fontSize = 100;
      this.applyFontSize();
    }

    applyFontSize() {
      const slideContainer = this.modal.querySelector('.slide-content');
      if (slideContainer) {
        const scale = this.fontSize / 100;
        slideContainer.style.setProperty('--font-scale', scale);
      }
    }
  }

  // Initialize the SlideViewer
  function initSlideViewer() {
    try {
      new SlideViewer();
    } catch (error) {
      console.error('SlideViewer initialization failed:', error);
    }
  }

  // Initialize when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initSlideViewer);
  } else {
    // DOM is already loaded, initialize immediately
    initSlideViewer();
  }
</script>