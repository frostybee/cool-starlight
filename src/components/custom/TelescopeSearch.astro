---
---

<div id="telescope-modal" class="telescope-modal">
  <div class="telescope-container">
    <div class="telescope-header">
      <input type="text" class="telescope-search-input" placeholder="Search pages..." aria-label="Search pages" />
    </div>
    <div class="telescope-results"></div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const telescopeModal = document.getElementById('telescope-modal');
    const telescopeSearchInput = document.querySelector('.telescope-search-input');
    const telescopeResults = document.querySelector('.telescope-results');

    // Store all page data
    let pages = [];

    // Initialize Fuse instance for fuzzy search
    let fuse;

    // Collect page data from the Starlight sidebar
    function collectPages() {
      pages = [];

      // Get all links from the sidebar
      const sidebarLinks = document.querySelectorAll('.sidebar-content a');

      sidebarLinks.forEach((link) => {
        const url = link.getAttribute('href');
        const title = link.textContent.trim();

        // Skip external links and anchors
        if (url && !url.startsWith('http') && !url.startsWith('#')) {
          pages.push({
            title: title,
            url: url,
            // Get breadcrumb/path information
            path: getPagePath(link)
          });
        }
      });

      // Initialize Fuse with collected pages
      fuse = new Fuse(pages, {
        keys: ['title', 'path'],
        includeMatches: true,
        threshold: 0.4
      });
    }

    // Helper to get the page path/breadcrumb
    function getPagePath(link) {
      const pathParts = [];
      let parent = link.closest('li');

      while (parent) {
        const heading = parent.querySelector(':scope > .sidebar-group-header');
        if (heading) {
          pathParts.unshift(heading.textContent.trim());
        }
        parent = parent.parentElement.closest('li');
      }

      return pathParts.join(' > ');
    }

    // Handle search input
    function handleSearch() {
      const query = telescopeSearchInput.value.trim();
      telescopeResults.innerHTML = '';

      if (query === '') {
        // Show all pages if no query
        pages.slice(0, 10).forEach((page, index) => {
          addResultItem(page, index === 0);
        });
      } else {
        // Search with Fuse.js
        const results = fuse.search(query);

        if (results.length === 0) {
          telescopeResults.innerHTML = '<div class="telescope-item">No results found</div>';
          return;
        }

        results.forEach((result, index) => {
          addResultItem(result.item, index === 0, result.matches);
        });
      }
    }

    // Add a result item to the results list
    function addResultItem(page, isSelected, matches) {
      const item = document.createElement('div');
      item.className = 'telescope-item';
      if (isSelected) {
        item.classList.add('selected');
      }
      item.dataset.url = page.url;

      const title = document.createElement('div');
      title.className = 'telescope-item-title';

      const path = document.createElement('div');
      path.className = 'telescope-item-path';

      // Highlight matches if available
      if (matches) {
        matches.forEach(match => {
          if (match.key === 'title') {
            title.innerHTML = highlightMatches(page.title, match.indices);
          } else if (match.key === 'path') {
            path.innerHTML = highlightMatches(page.path, match.indices);
          }
        });
      } else {
        title.textContent = page.title;
        path.textContent = page.path;
      }

      item.appendChild(title);
      if (page.path) {
        item.appendChild(path);
      }

      item.addEventListener('click', () => {
        navigateToPage(page.url);
      });

      telescopeResults.appendChild(item);
    }

    // Highlight matched characters
    function highlightMatches(text, indices) {
      if (!indices || indices.length === 0) {
        return text;
      }

      const chars = text.split('');
      const ranges = [];

      // Convert matches to continuous ranges
      indices.forEach(([start, end]) => {
        for (let i = start; i <= end; i++) {
          ranges[i] = true;
        }
      });

      // Highlight characters in ranges
      let result = '';
      let inHighlight = false;

      for (let i = 0; i < chars.length; i++) {
        const shouldHighlight = ranges[i];

        if (shouldHighlight && !inHighlight) {
          result += '<span class="match-highlight">';
          inHighlight = true;
        } else if (!shouldHighlight && inHighlight) {
          result += '</span>';
          inHighlight = false;
        }

        result += chars[i];
      }

      if (inHighlight) {
        result += '</span>';
      }

      return result;
    }

    // Navigate to selected page
    function navigateToPage(url) {
      window.location.href = url;
    }

    // Toggle telescope visibility
    function toggleTelescope() {
      if (telescopeModal.style.display === 'none' || !telescopeModal.style.display) {
        // Lazy load Fuse.js if needed
        loadFuseJsIfNeeded(() => {
          collectPages();
          telescopeModal.style.display = 'flex';
          telescopeSearchInput.value = '';
          telescopeSearchInput.focus();
          handleSearch();
        });
      } else {
        telescopeModal.style.display = 'none';
      }
    }

    // Helper to load Fuse.js dynamically
    function loadFuseJsIfNeeded(callback) {
      if (window.Fuse) {
        callback();
        return;
      }

      const script = document.createElement('script');
      script.src = 'https://cdn.jsdelivr.net/npm/fuse.js@6.6.2/dist/fuse.min.js';
      script.onload = callback;
      document.head.appendChild(script);
    }

    // Keyboard navigation
    function handleKeyDown(e) {
      // Ctrl+P or Cmd+P to toggle telescope
      if ((e.ctrlKey || e.metaKey) && e.key === 'p') {
        e.preventDefault();
        toggleTelescope();
        return;
      }

      // Handle keyboard navigation when telescope is open
      if (telescopeModal.style.display === 'flex') {
        if (e.key === 'Escape') {
          // Close on Escape
          telescopeModal.style.display = 'none';
        } else if (e.key === 'ArrowDown' || (e.ctrlKey && e.key === 'j')) {
          // Next item (Down arrow or Ctrl+J)
          e.preventDefault();
          navigateResults(1);
        } else if (e.key === 'ArrowUp' || (e.ctrlKey && e.key === 'k')) {
          // Previous item (Up arrow or Ctrl+K)
          e.preventDefault();
          navigateResults(-1);
        } else if (e.key === 'Enter') {
          // Navigate to selected
          e.preventDefault();
          const selected = telescopeResults.querySelector('.selected');
          if (selected) {
            navigateToPage(selected.dataset.url);
          }
        }
      }
    }

    // Navigate through results with keyboard
    function navigateResults(direction) {
      const items = telescopeResults.querySelectorAll('.telescope-item');
      if (items.length === 0) return;

      const currentIndex = Array.from(items).findIndex(item => item.classList.contains('selected'));
      let newIndex = currentIndex + direction;

      // Loop around
      if (newIndex < 0) newIndex = items.length - 1;
      if (newIndex >= items.length) newIndex = 0;

      // Update selection
      items.forEach((item, i) => {
        if (i === newIndex) {
          item.classList.add('selected');
          // Scroll into view if needed
          const container = telescopeResults;
          const itemTop = item.offsetTop;
          const itemBottom = itemTop + item.offsetHeight;
          const containerTop = container.scrollTop;
          const containerBottom = containerTop + container.offsetHeight;

          if (itemTop < containerTop) {
            container.scrollTop = itemTop;
          } else if (itemBottom > containerBottom) {
            container.scrollTop = itemBottom - container.offsetHeight;
          }
        } else {
          item.classList.remove('selected');
        }
      });
    }

    // Close when clicking outside
    telescopeModal.addEventListener('click', (e) => {
      if (e.target === telescopeModal) {
        telescopeModal.style.display = 'none';
      }
    });

    // Handle search input
    telescopeSearchInput.addEventListener('input', handleSearch);

    // Global keyboard events
    document.addEventListener('keydown', handleKeyDown);

    // Initially hide modal
    telescopeModal.style.display = 'none';

    // Log a message when ready
    console.log('Starlight Telescope navigation loaded. Use Ctrl+P or Cmd+P to search.');
  });
</script>

<style>
  .telescope-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 9999;
    display: none;
    align-items: center;
    justify-content: center;
  }

  .telescope-container {
    width: 600px;
    max-width: 90%;
    background-color: var(--sl-color-bg);
    border-radius: 8px;
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.15);
    overflow: hidden;
    max-height: 80vh;
    display: flex;
    flex-direction: column;
  }

  .telescope-header {
    padding: 16px;
    border-bottom: 1px solid var(--sl-color-gray-5);
  }

  .telescope-search-input {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid var(--sl-color-gray-5);
    border-radius: 4px;
    font-size: 16px;
    background-color: var(--sl-color-bg);
    color: var(--sl-color-text);
  }

  .telescope-results {
    overflow-y: auto;
    max-height: 60vh;
  }

  .telescope-item {
    padding: 12px 16px;
    cursor: pointer;
    border-bottom: 1px solid var(--sl-color-gray-5);
    transition: background-color 0.2s;
  }

  .telescope-item:hover, .telescope-item.selected {
    background-color: var(--sl-color-gray-2);
  }

  .telescope-item-title {
    font-weight: 500;
    margin-bottom: 4px;
  }

  .telescope-item-path {
    font-size: 12px;
    color: var(--sl-color-text-accent);
  }

  .match-highlight {
    font-weight: bold;
    color: var(--sl-color-accent);
  }
</style>
