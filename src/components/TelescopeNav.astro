---
---

<div id="telescope-nav" class="telescope-nav hidden">
  <div class="telescope-modal">
    <div class="telescope-search">
      <input type="text" id="telescope-input" placeholder="Search pages..." />
    </div>
    <div class="telescope-results" id="telescope-results"></div>
  </div>
</div>

<style>
  .telescope-nav {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    z-index: 9999;
    display: flex;
    justify-content: center;
    align-items: flex-start;
    padding-top: 10vh;
  }

  .telescope-nav.hidden {
    display: none;
  }

  .telescope-modal {
    width: 90%;
    max-width: 600px;
    background: var(--sl-color-white);
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    overflow: hidden;
  }

  .telescope-search {
    padding: 1rem;
    border-bottom: 1px solid var(--sl-color-gray-3);
  }

  .telescope-search input {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid var(--sl-color-gray-3);
    border-radius: 4px;
    font-size: 1rem;
  }

  .telescope-results {
    max-height: 60vh;
    overflow-y: auto;
  }

  .telescope-result-item {
    padding: 0.75rem 1rem;
    cursor: pointer;
    border-bottom: 1px solid var(--sl-color-gray-3);
  }

  .telescope-result-item:hover,
  .telescope-result-item.selected {
    background: var(--sl-color-gray-1);
  }

  .telescope-result-item .title {
    font-weight: 500;
    margin-bottom: 0.25rem;
  }

  .telescope-result-item .path {
    font-size: 0.875rem;
    color: var(--sl-color-gray-5);
  }

  .highlight {
    background: var(--sl-color-blue-2);
    padding: 0 2px;
    border-radius: 2px;
  }

  @media (prefers-color-scheme: dark) {
    .telescope-modal {
      background: var(--sl-color-gray-8);
    }

    .telescope-search input {
      background: var(--sl-color-gray-7);
      color: var(--sl-color-white);
      border-color: var(--sl-color-gray-6);
    }

    .telescope-result-item:hover,
    .telescope-result-item.selected {
      background: var(--sl-color-gray-7);
    }

    .highlight {
      background: var(--sl-color-blue-8);
    }
  }
</style>

<script>
  // Fuse.js type declaration
  declare class Fuse<T> {
    constructor(list: T[], options?: any);
    search(pattern: string): any[];
  }

  let fuse: Fuse<any> | null = null;
  let currentIndex = -1;
  let searchResults: any[] = [];
  const modal = document.getElementById('telescope-nav');
  const input = document.getElementById('telescope-input') as HTMLInputElement | null;
  const resultsContainer = document.getElementById('telescope-results');

  // Load Fuse.js from CDN
  async function loadFuse() {
    if (typeof Fuse === 'undefined') {
      const script = document.createElement('script');
      script.src = 'https://cdn.jsdelivr.net/npm/fuse.js@6.6.2';
      script.async = true;
      document.head.appendChild(script);
      await new Promise(resolve => script.onload = resolve);
    }
  }

  // Initialize Fuse.js with data
  async function initializeFuse() {
    try {
      const response = await fetch('/pages.json');
      const data = await response.json();

      const fuseOptions = {
        keys: ['title', 'path'],
        threshold: 0.3,
        includeMatches: true,
        minMatchCharLength: 2
      };

      fuse = new Fuse(data, fuseOptions);
    } catch (error) {
      console.error('Failed to initialize search:', error);
    }
  }

  // Handle search
  function handleSearch(query: string) {
    if (!fuse) return;

    searchResults = fuse.search(query);
    currentIndex = -1;
    renderResults();
  }

  // Render search results
  function renderResults() {
    if (!resultsContainer) return;

    resultsContainer.innerHTML = '';

    searchResults.forEach((result, index) => {
      const item = document.createElement('div');
      item.className = `telescope-result-item ${index === currentIndex ? 'selected' : ''}`;

      const title = document.createElement('div');
      title.className = 'title';
      title.innerHTML = highlightMatches(result.item.title, result.matches);

      const path = document.createElement('div');
      path.className = 'path';
      path.textContent = result.item.path;

      item.appendChild(title);
      item.appendChild(path);

      item.addEventListener('click', () => navigateTo(result.item.path));
      resultsContainer.appendChild(item);
    });

    // Scroll selected item into view
    if (currentIndex >= 0) {
      const selectedItem = resultsContainer.children[currentIndex] as HTMLElement;
      if (selectedItem) {
        selectedItem.scrollIntoView({ block: 'nearest' });
      }
    }
  }

  // Highlight matches
  function highlightMatches(text: string, matches: any[] | undefined) {
    if (!matches) return text;

    let result = text;
    matches.forEach(match => {
      if (match.key === 'title') {
        const indices = match.indices;
        let offset = 0;
        indices.forEach(([start, end]: [number, number]) => {
          const before = result.slice(0, start + offset);
          const match = result.slice(start + offset, end + offset + 1);
          const after = result.slice(end + offset + 1);
          result = `${before}<span class="highlight">${match}</span>${after}`;
          offset += 27; // Length of the highlight span tags
        });
      }
    });
    return result;
  }

  // Navigate to selected page
  function navigateTo(path: string) {
    window.location.href = path;
  }

  // Handle keyboard navigation
  function handleKeyNavigation(e: KeyboardEvent) {
    if (!modal?.classList.contains('hidden')) {
      // Prevent default only for navigation keys
      const isNavigationKey = ['ArrowDown', 'ArrowUp', 'j', 'k', 'Enter', 'Escape'].includes(e.key);
      if (isNavigationKey) {
        e.preventDefault();
      }

      switch (e.key) {
        case 'ArrowDown':
        case 'j':
          if (searchResults.length > 0) {
            currentIndex = Math.min(currentIndex + 1, searchResults.length - 1);
            renderResults();
          }
          break;
        case 'ArrowUp':
        case 'k':
          if (searchResults.length > 0) {
            currentIndex = Math.max(currentIndex - 1, 0);
            renderResults();
          }
          break;
        case 'Enter':
          if (currentIndex >= 0 && searchResults[currentIndex]) {
            navigateTo(searchResults[currentIndex].item.path);
          }
          break;
        case 'Escape':
          closeModal();
          break;
      }
    }
  }

  // Open modal
  function openModal() {
    if (!modal || !input) return;
    modal.classList.remove('hidden');
    input.focus();
    // Reset state when opening
    currentIndex = -1;
    searchResults = [];
    if (resultsContainer) {
      resultsContainer.innerHTML = '';
    }
  }

  // Close modal
  function closeModal() {
    if (!modal || !input || !resultsContainer) return;
    modal.classList.add('hidden');
    input.value = '';
    resultsContainer.innerHTML = '';
    currentIndex = -1;
    searchResults = [];
  }

  // Initialize
  async function initialize() {
    await loadFuse();
    await initializeFuse();

    // Event listeners
    document.addEventListener('keydown', (e: KeyboardEvent) => {
      if ((e.ctrlKey || e.metaKey) && e.key === 'p') {
        e.preventDefault();
        openModal();
      }
    });

    input?.addEventListener('input', (e: Event) => {
      const target = e.target as HTMLInputElement;
      handleSearch(target.value);
    });

    // Use capture phase to ensure our handler runs before others
    document.addEventListener('keydown', handleKeyNavigation, true);

    // Close on outside click
    modal?.addEventListener('click', (e: MouseEvent) => {
      if (e.target === modal) {
        closeModal();
      }
    });
  }

  // Start initialization when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initialize);
  } else {
    initialize();
  }
</script>
